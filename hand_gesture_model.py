# -*- coding: utf-8 -*-
"""hand_gesture.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15fNhsgqG8sTgi_eShh0OQ4r3iT7E_24W
"""

from google.colab import drive
drive.mount('/content/gdrive')
import os
os.chdir('gdrive/MyDrive/hand_gesture')

import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
import tensorflow_hub as hub

IMAGE_SIZE = (224, 224)

BATCH_SIZE = 16

train_data_dir = "./train/"
valid_data_dir = "./test/"

train_ds = tf.keras.utils.image_dataset_from_directory(
  train_data_dir,
  image_size=IMAGE_SIZE,
  batch_size=BATCH_SIZE,
  color_mode = "rgb"
)

test_ds = tf.keras.utils.image_dataset_from_directory(
  valid_data_dir,
  image_size=IMAGE_SIZE,
  batch_size=BATCH_SIZE,
  color_mode = "rgb"
)

class_names = np.array(train_ds.class_names)
print(class_names)

AUTOTUNE = tf.data.AUTOTUNE
train_ds = train_ds.cache().prefetch(buffer_size=AUTOTUNE)
test_ds = test_ds.cache().prefetch(buffer_size=AUTOTUNE)

do_fine_tuning = True

feature_extractor_layer = tf.keras.applications.MobileNetV3Large(
    input_shape =(224, 224, 3),
    include_top = False,
    pooling='avg',
    weights='imagenet',
    include_preprocessing=True,
    minimalistic=True)

num_classes = len(class_names)

data_augmentation_1 = tf.keras.Sequential([
    tf.keras.layers.experimental.preprocessing.RandomFlip("horizontal"),
    tf.keras.layers.experimental.preprocessing.RandomFlip("vertical")
])

train_ds = train_ds.map(lambda x, y: (data_augmentation_1(x, training=True),y),
                        num_parallel_calls=AUTOTUNE)

inputs = tf.keras.Input(shape=(224,224,3))

x = feature_extractor_layer(inputs, training=False)

y = tf.keras.layers.Dropout(0.4)(x)

outputs = tf.keras.layers.Dense(num_classes,kernel_regularizer=tf.keras.regularizers.l2(
    0.7),name='output',activation='softmax')(y)

model = tf.keras.Model(inputs,outputs)

initial_learning_rate = 0.0001
lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(
    initial_learning_rate,
    decay_steps=100000,
    decay_rate=0.95,
    staircase=True)

model.compile(
  optimizer=tf.keras.optimizers.Adam(learning_rate=0.000006,beta_1=.85,beta_2=.95),#0.0005
  loss="SparseCategoricalCrossentropy",
  metrics=['acc'])

checkpoint_filepath = "./tmp/best_model"
model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(
    filepath=checkpoint_filepath,
    save_weights_only=True,
    monitor='val_acc',
    mode='max',
    save_best_only=True)

model.fit(train_ds,
                 validation_data=test_ds,
                 epochs=20,
                 shuffle=True,
                 callbacks=[model_checkpoint_callback])

model2 = model

###########################################

feature_extractor_layer.trainable = True
model2.compile(
    optimizer = tf.keras.optimizers.Adam(learning_rate=1e-5,beta_1=.89,beta_2=.99),#1.98e-6
    loss="SparseCategoricalCrossentropy",
    metrics=['acc'])

model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(
        filepath=checkpoint_filepath,
        save_weights_only=True,
        monitor='val_acc',
        mode='max',
        save_best_only=True)

model2.fit(train_ds,
                validation_data=test_ds,
                epochs=10,
                shuffle=True,
                callbacks=[model_checkpoint_callback]).history

model.save("./tmp/saved_model_04_12")
